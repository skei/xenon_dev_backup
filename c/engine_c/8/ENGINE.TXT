Render pipeline:

Render pipeline:
{
 Set up camera matrix
 set up camera view frustum planes
 for all objects:
 {
  calc matrix
  inherit matrix from parent's o2w ( = o2w)
  multiply w/camera matrix ( = o2c )
 }
 for all objects:
 {
  if active, continue
  bounding sphere test (A)
  for all vertices:
  {
   transform o2c
   project 3D->2D
  }
  for all polygons:
  {
   backface cull
   check if z-clipping needed (B)
   calc z for sorting
   insert in global renderlist
  }
 }
 sort renderlist
 draw all polys. (C)
}

---

(A) Check distance from center of bounding sphere (object pos, or pivot?)
    against all view frustum planes...
    mark object INSIDE, OUTSIDE or NEED_CLIP
    if OUTSIDE, skip entire object - since it's not visible on screen
    Mark with a bit for each clip plane... So that we know which side of
    the screen and eventual z-clip we need to test for later on...
(B) If bounding sphere intersects near Z plane, Check Z for all three
    vertices, if all beyond screen plane, skip poly If one or two, mark as
    Z-clipping necessary
(C) 1. Calc constant gradients
    2. If z-clipping necessary, clip against view plane
    3. if NEED_CLIP - usual 2D clipping
    4. Draw poly, according to shading/mapping flags & material, etc...

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 spanlength = 16

 width = x2-x1
 if (width <= spanlength) goto special case - affine mapping

 invz = 1/z       // disse, og _addere har nok blitt kalkulert tidligere
 invu = (u*invz)  // i polyfiller prosessen...
 invv = (v*invz)  //

 invz += invz_adder
 r = 1/invz

 // Pr›v † ha mest mulig INT math mellom divisjon, og bruk av resultatet

 invu += invu_adder // precalced & multiplied by spanlength
 invv += invv_adder // constant for entire polygon.

 u1 = u             // Left U & V (starting u & v)
 v1 = v
 u2 = invu*r
 v2 = invv*r

loop:

 invu+=invu_adder
 invv+=invv_adder
 invz+=invz_adder
 r=1/invz
 HorizLine(screenpos,u1,u2,v1,v2) // or something
 u1=u2
 v1=v2
 u2=invu*r
 v2=invv*r
 goto loop

---

 // Skriver fra h›yre mot venstre? Ikke s† bra for cache, eller spiller
 det ingen rolle?

 eax 0
 ebx
 ecx v.frac       c.int : c.frac
 edx textureû     v.int : u.int
 esi u.frac
 edi      screenposı
 ebp      line-lengthü

 û 64k aligned...
 ı right edge of line
 ü negaive line length * bpp

 --

  mov al,[edx]
  add esi,11220000h

  adc dl,11h
  mov ah,ch

  add ecx,11221111h
  mov bl,[ShadeTable+eax]   ; bl for 8-bit, ebx for all others

  adc dh,11h
  mov [edi+ebp],bl          ; bl or bx or ebx

  inc ebp                   ; add ebp,2 or 4 for 15/16 & 32 bpp etc
  jnz L1

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

SetupFrustum
 setter opp 5 eller 6 plan for frustum. Med FOV etc...

CheckBoundingSphere
 sjekker distance_sphere_plane. returnerer:
  1 = sphere totally outside plane (behind)
  2 = sphere intersects plane
  3 = sphere totally inside plane
 eller noe slikt. Setter flag i objekt for "clipping necessary"

hierarki
 alle objekter har Ptr to parent, og to matriser:
 en for ObjToWorld transform, og en ObjToCamera
 f›rst kalkuleres obj2world, som multipliseres med parent's obj2world
 deretter til slutt, multipliseres med camera-matrix for † f† obj2camera

clipping
 enten 2d clipping med z-clip
 eller full 3d frustum poly clipping
