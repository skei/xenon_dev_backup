 sVertex strukturer har en ptr til en sNormal. S† kan all› vertices som
 "deler" normalen enten peke til samme sVertex (som 3DS), eller de kan
 peke til forskjellige. P† denne m†ten kan man enkelt fikse wrapping
 bugs.
 I tillegg, en flat-shaded kube trenger bare 6 normaler - 2 og 2 faces
 peker til samme normal... Mindre normaler † beregne, kjappere...
 Alle 3 kan peke til samme normal, s† en kube ikke blir "avrundet".

 Ta hensyn til smoothing groups ved beregning av normaler, og evt sette de
 3 til † peke til nye/samme hvis vinkelen mellom vektorer er mer/mindre
 enn s† eller s†... ???

---

Render pipeline:
{
 Set up camera matrix
 set up camera view frustum planes
 for all objects:
 {
  calc matrix
  inherit matrix from parent's o2w ( = o2w)
  multiply w/camera matrix ( = o2c )
 }
 for all objects:
 {
  if active, continue
  bounding sphere test (A)
  for all vertices:
  {
   transform o2c
   project 3D->2D
  }
  for all polygons:
  {
   backface cull
   check if z-clipping needed (B)
   calc z for sorting
   insert in global renderlist
  }
 }
 sort renderlist
 draw all polys. (C)
}



(A) Check distance from center of bounding sphere (object pos, or pivot?)
    against all view frustum planes...
    mark object INSIDE, OUTSIDE or NEED_CLIP
    if OUTSIDE, skip entire object - since it's not visible on screen
(B) Check Z for all three vertices, if all beyond screen plane, skip poly
    If one or two, mark as Z-clipping necessary
(C) 1. Calc constant gradients
    2. If z-clipping necessary, clip against view plane
    3. if NEED_CLIP - usual 2D clipping
    4. Draw poly, according to shading/mapping flags & material, etc...

