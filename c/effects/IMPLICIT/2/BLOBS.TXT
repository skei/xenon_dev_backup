>I look for a blob algorithm.
>Any source code and theorical stuff would be appreciated ....
>Saint-Jean Christophe

First, blobs are described in the POV-Ray documentation.
As far as I know, the surface of blobs is (defined as) the set of all
points in which the intensity of a field, generated by a number of
points, has a certain value. The field intensity at a certain point in
the 3D-space is calculated as the sum of the intensities of each field
(generated by one point). The field intensity is proportional to
1/r^2.

If you want to raytrace blobs, perhaps the following method will help:
Wor each ray of light, a polynomial has to be calculated the roots of
which are the points on the surface. For this, you have to use the
equation for the field intensity:
((x-x0)^2+(y-y0)^2+(z-z0)^2)*i0 + ((x-x1)^2+(y-y1)^2+(z-z1)^2)*i1 +
..-d =0

With: xn/yn/zn: Points that generate the fields,
      in      : Field intensities
      d       : Field intensity at the blob's surface

Then you have to replace x/y/z by the equation for the ray that has to
be calculated.

You now have to calculate the roots of this polynomial, which should
not be too difficult, as it has only the degree 2.

At last, the cutpoint can be calculated by the root of the polynomial
and the equation of the ray.

I hope all this is correct and my english is not too bad....
Martin Melcher
Martin.Melcher@t-online.de

.............................................................................

Subject:      Re: Marching cubes lookup table - help is here Part 2
From:         Cory Bloyd <bloydcg@cs.purdue.edu>
Newsgroups:   comp.graphics.algorithms

This is the actual table that I said I wouldn't post.  But, as I said
in Part 1, I lost the address of whoever it was that asked for this so
here it is for everyone.

 int triTable[256][16] also corresponds to the 256 possible combinations
of vertices.  This is the more important of the two tables and is
probably what you were looking for.  For those who missed the first
post, I'll repeat the part about constructing the index and which
vertices and faces are which.

<---From Part 1 ---->
It corresponds to the 2^8 possible combinations of of the eight (n)
vertices either existing inside or outside (2^n) of the surface.  A
vertex is inside of a surface if the value at that vertex is less than
that of the surface you are scanning for.  The table index is
constructed bitwise with bit 0 corresponding to vertex 0, bit 1 to vert
1.. bit 7 to vert 7.  The value in the table tells you which edges of
the table are intersected by the surface.  Once again bit 0 corresponds
to edge 0 and so on, up to edge 12.  Constructing the table simply
consisted of having a program run thru the 256 cases and setting the
edge bit if the vertices at either end of the edge had different values
(one is inside while the other is out).

If I remember correctly Vertex 0 is on the bottom face, back edge, left
side.  The progression of vertices is clockwise around the bottom face
and then clockwise around the top face of the cube.  Edge 0 goes from
vertex 0 to vertex 1, Edge 1 is from 2->3 and so on around clockwise to
vertex 0 again. Then Edge 4 to 7 make up the top face, 4->5, 5->6, 6->7
and 7->4.  Edge 8 thru 11 are the vertical edges from vert 0->4, 1->5,
2->6, and 3->7.

     4--------5     *---4----*
    /|       /|    /|       /|
   / |      / |   7 |      5 |          !!!!!!WARNING!!!!!!
  /  |     /  |  /  8     /  9
 7--------6   | *----6---*   |  In Part 1 I incorrectly labeled some
 |   0----|---1 |   *---0|---*  of the edges.  What I have shown here
 |  /     |  /  11 /     10 /   has been corrected.
 | /      | /   | 3      | 1
 |/       |/    |/       |/             !!!!!!WARNING!!!!!!
 3--------2     *---2----*

<---End of clip from Part 1--->

 The [16] dimension of the table is again the list of edges of the cube
which are intersected by the surface.  This time however, the edges are
enumerated in the order of the vertices making up the triangle mesh of
the surface.  Each edge contains one vertex that is on the surface.
Each triple of edges listed in the table contains the vertices of one
triangle on the mesh.  The are 16 entries because it has been shown that
there are at most 5 triangles in a cube and each "edge triple" list is
terminated with the value -1.

 For example triTable[3] contains
{1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
This corresponds to the case of a cube whose vertex 0 and 1 are inside
of the surface and the rest of the verts are outside (00000001 bitwise
OR'ed with 00000010 makes 00000011 == 3).  Therefore, this cube is
intersected by the surface roughly in the form of a plane which cuts
edges 8,9,1 and 3.  This quadrilateral can be constructed from two
triangles: one which is made of the intersection vertices found on edges
1,8, and 3; the other is formed from the vertices on edges 9,8, and 1.
Remember, each intersected edge contains only one surface vertex.  The
vertex triples are listed in counter clockwise order for proper facing.

 Below is repeated the snip of code from Part 1.  This time I added the
end of the loop where the triTable is actually used.  Again, I apologize
for the gratuitous use of pointer arithmetic and horrendous abuse of
macros!

#define Grid(X,Y,Z) (*(grid +(X) +NI*(Y) +NIJ*(Z)))
#define Dif(A,B) ((fabs((A)-(B)) <= 0.000001))
#define interp(ISO,d,x1,y1,z1,x2,y2,z2) ( (Dif(ISO,Grid(x1,y1,z1))) ?
0.0 : (Dif(ISO,Grid(x2,y2,z2))) ? d :
(Dif(Grid(x1,y1,z1),Grid(x2,y2,z2))) ? 0.0 :
((ISO-Grid(x1,y1,z1))*(d)/(Grid(x2,y2,z2)-Grid(x1,y1,z1))) )

/* //linearly interpolates the location of the intersection vertex along
   // the cube edge
float interp(grid,ISOLEV,d,x1,y1,z1,x2,y2,z2,NI,NJ,NIJ)
 float *grid, ISOLEV, d; int x1, y1, z1, x2, y2, z2, NI, NJ, NIJ;
{
 if (ISOLEV == Grid(x1,y1,z1)) return(0.0);
 if (ISOLEV == Grid(x2,y2,z2)) return(d);
 if (Grid(x1,y1,z1) == Grid(x2,y2,z2)) return(0.0);
 return((ISOLEV-Grid(x1,y1,z1))*d/(Grid(x2,y2,z2)-Grid(x1,y1,z1)));
};
*/

double *vertList; //dynamic array of x,y,z triples, one for each vertex
                     // in the surface
int *triList;     //dynamic array of vertex index triples (into
vertList)
                     // one for each triangle in the surface
int vertIndex[12];// record of vertex indices added to the vertList from
                     // the current cube, one for each cube edge
int numVerts;     //running tally of how many surface vertices have been
                     // found
int numTris;      //running tally of triangles
<---From Part 1---->

int NI, NJ, NK;     //the dimensions of the grid in i,j,k (# of cubes)
int NIJ;            // NI*NJ, used for indexing in the z direction
double dx, dy, dz;  //the dimensions of each cube in the grid
double ISOLEV;      // Value of the surface we are scanning for
int vertIndex[12];  //used in next table which is explained in next post

 numVerts = 0;
 *numTris = 0;

 for(z=0; z<NK-1; z++)
 {
  for(y=0; y<NJ-1; y++)
  {
   for(x=0; x<NI-1; x++)
   {
                      /* Determine which verts are inside of the surface
*/
    cubeIndex = 0;
    if(Grid(x,  y,  z)   < ISOLEV) cubeIndex |= 1;
    if(Grid(x+1,y,  z)   < ISOLEV) cubeIndex |= 2;
    if(Grid(x+1,y+1,z)   < ISOLEV) cubeIndex |= 4;
    if(Grid(x,  y+1,z)   < ISOLEV) cubeIndex |= 8;
    if(Grid(x,  y,  z+1) < ISOLEV) cubeIndex |= 16;
    if(Grid(x+1,y,  z+1) < ISOLEV) cubeIndex |= 32;
    if(Grid(x+1,y+1,z+1) < ISOLEV) cubeIndex |= 64;
    if(Grid(x  ,y+1,z+1) < ISOLEV) cubeIndex |= 128;
    if(!edgeTable[cubeIndex]) continue;/* Cube is entirely in/out of
surface */

                                            /* Find surface vertices */
     if(edgeTable[cubeIndex] & 1)
     {
      *(vertList+3*numVerts)=x*dx+interp(ISOLEV,dx,x,y,z,x+1,y,z);
      *(vertList+3*numVerts+1)=y*dy;
      *(vertList+3*numVerts+2)=z*dz;
      vertIndex[0]=numVerts++;
     }
     if(edgeTable[cubeIndex] & 2)
     {
      *(vertList+3*numVerts)=(x+1)*dx;
      *(vertList+3*numVerts+1)=y*dy+interp(ISOLEV,dy,x+1,y,z,x+1,y+1,z);
      *(vertList+3*numVerts+2)=z*dz;
      vertIndex[1]=numVerts++;
     }
     if(edgeTable[cubeIndex] & 4)
     {
      *(vertList+3*numVerts)=x*dx+interp(ISOLEV,dx,x,y+1,z,x+1,y+1,z);
      *(vertList+3*numVerts+1)=(y+1)*dy;
      *(vertList+3*numVerts+2)=z*dz;
      vertIndex[2]=numVerts++;
     }
     if(edgeTable[cubeIndex] & 8)
     {
<ect...>
<---End clip from Part 1--->

<...continues to test each intersected edge >
<...(except for those that have been cached from a previous cube ;)...>

    /* Compile triangle list */
    for(i=0; triTable[cubeIndex][i] != -1; i+=3)
    {
     *(triList +3*(*numTris)   ) = vertIndex[triTable[cubeIndex][i  ]];
     *(triList +3*(*numTris) +1) = vertIndex[triTable[cubeIndex][i+1]];
     *(triList +3*(*numTris) +2) = vertIndex[triTable[cubeIndex][i+2]];
     *(numTris) = *(numTris) +1;
    }/*for(i)*/

   }/*for(x)*/
  }/*for(y)*/
 }/*for(z)*/

 What going on in the /* Compile triangle list */ loop is both very
simple
and very complicated.  Remember that vertIndex[n] contains the index
into the vertexList of the surface vertex on the cube edge n.  In
pseudocode the above could be described as:

 For each new Triangle
  Add to the TriangleList (the next triangle described by TriTable)

 I think I've bored you long enough.  So finally, here's the table!

static int triTable[256][16] =
{{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
{3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
{3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
{3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
{9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
{2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
{8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
{4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
{3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
{1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
{4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
{4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
{5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
{2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
{9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
{0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
{2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
{10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
{5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
{5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
{9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
{1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
{10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
{8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
{2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
{7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
{2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
{11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
{5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
{11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
{11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
{9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
{2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
{6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
{3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
{6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
{10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
{6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
{8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
{7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
{3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
{0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
{9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
{8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
{5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
{0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
{6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
{10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
{10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
{8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
{1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
{0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
{10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
{3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
{6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
{9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
{8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
{3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
{6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
{0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
{10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
{10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
{2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
{7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
{7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
{2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
{1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
{11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
{8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
{0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
{7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
{10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
{2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
{6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
{7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
{2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
{10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
{10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
{0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
{7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
{6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
{8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
{9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
{6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
{4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
{10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
{8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
{0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
{1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
{8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
{10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
{4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
{10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
{11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
{9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
{6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
{7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
{3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
{7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
{3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
{6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
{9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
{1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
{4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
{7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
{6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
{3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
{0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
{6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
{0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
{11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
{6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
{5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
{9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
{1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
{1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
{10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
{0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
{5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
{10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
{11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
{9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
{7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
{2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
{8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
{9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
{9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
{1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
{9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
{5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
{0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
{10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
{2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
{0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
{0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
{9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
{5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
{3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
{5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
{8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
{0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
{9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
{1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
{3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
{4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
{9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
{11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
{11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
{2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
{9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
{3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
{1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
{4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
{3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
{0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
{1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};

.............................................................................

From:       sander@geom.umn.edu (Evelyn Sander)
Subject:    Implicit Surface Algorithm

Mike Henderson's Implicit Surface Algorithm

A standard objective in computational mathematics is to graph an
implicitly defined surface. Here is a geometric description of a
practical but conceptually elegant continuation algorithm written by
Mike Henderson of IBM. Since this is a description of a graphing
algorithm, it is more interesting when accompanied by figures. Either
read the World-Wide Web version of this article in url:
http://www.geom.umn.edu/forum/henderson/henderson.html or ftp the
figures from ftp: forum.swarthmore.edu/pictures/articles/henderson

Given a point of an implicitly defined surface with full rank
Jacobian, the implicit function theorem guarantees that there is some
neighborhood in the tangent space that maps onto the surface in a
bijective manner. In Riemannian geometry, this map is called the
exponential map. Starting with a point on the surface, Henderson's
algorithm computes the exponential map in a small elliptic region in
the tangent space using many applications of Newton's method. Figure 1
shows a (light yellow) region of the surface x^2+y^2-z=0 computed
starting from the (dark blue) tangent plane shown in Figure 2.

Starting with the computed region on the surface, the algorithm picks
a point on the boundary. It computes the exponential map to the
surface mapping into a small neighborhood of this point.  Since the
point is on the boundary of the computed region, the exponential map
always gives new information on the surface. Figure 3 shows two
overlapping elliptic regions on the surface from Figure 1.

We want the algorithm to keep repeating the process in the previous
paragraph until it has computed the entire surface. (intersected with
a compact region) However, in order to get new information each time,
the algorithm must identify the overlap between the boundary of the
new region and the boundary of the previously computed region. This
overlap is interior to the entire computed region, namely the union of
the old and new regions. To avoid unnecessary calculation, the
algorithm must remove this overlap from consideration before finding a
new boundary point.  Finding and removing the overlap is the most
computationally difficult part of using Henderson's method. After
this, the algorithm repeats the process in the previous paragraph.
This entire procedure continues to repeat as often as necessary until
the algorithm finds no more boundary points, at which time it has
finished computing the surface. Figure 4 shows the computed part of
the surface in Figure 1 after repeating the entire procedure several
times.

There are many applications for such an algorithm. Here is a
description of a problem from fluid dynamics called the Taylor-Couette
convection problem. Start with two cylinders, one inside the other;
put fluid between them. Keep the outside cylinder fixed; spin the
inside cylinder. When the rate of spin is sufficiently slow, the fluid
just spins slowly around; this is called Couette flow. More precisely,
Couette flow is characterized by saying that the fluid velocity along
the axis of the cylinders is zero and the fluid velocity in the radial
direction is also zero.

Since the outside cylinder does not move, fluid moves more slowly at
the outside edge. As the spin rate increases, centrifugal force throws
the faster moving fluid at the inside cylinder outwards. This results
in a rolling or convection of the fluid in the radial direction.  At
the bifurcation point at which the fluid ceases to move in Couette
flow, two possible kinds of motion can occur together or separately;
one possibility is that the fluid moves around two torus-shaped
regions around the cylinder; that is, a cross section of fluid moves
around two circles in the radial direction.  This is what is called a
two-convection cell.  Another possible fluid motion is a
four-convection cell; in other words, the fluid moves radially in four
circles in the cross section.

Near the bifurcation point from Couette flow, two- and four-cells
coexist with different amplitudes, depending on the height and the
spin rate of the inside cylinder. To study the bifurcation point, it
is informative to plot the amplitudes of the two- and four-cells as a
function of the height of the cylinders and the velocity of the inner
cylinder.  This information is given implicitly using the
Navier-Stokes equations for fluid flow.  This is an example of a
2-dimensional surface in 4-dimensional space.

Figure 5 is a picture of a projection of this surface as computed by
Henderson's algorithm. He considers the specific situation of
infinitely long cylinders such that the flow periodic in the direction
along the axis. The aspect ratio is the ratio of the height of the
cylinders to the distance between the two cylinders. The Reynolds
number is a non-dimensional way of measuring the speed of the inner
cylinder. Namely,

    R= (angular velocity of inner cylinder)*(radius of inner cylinder)*
                            (distance between cylinders)/viscosity

This article is based on Henderson's talk in the University of
Minnesota Dynamics and Mechanics seminar on February 2, 1995.  I would
like to thank him for providing additional advice, as well as
preparing the figures for this article.

.............................................................................

_Implicit Surfaces and Real-Time Graphics_

by Kyle Lussier

Listing One

LSurface Components;    // Given Instance in Object Database

// Pre-Allocated Temporaries for Calculations
static float x1, y1, z1, x2, y2, z2,
             Tmp1, Tmp2, Tmp3, Tmp4, Tmp5, Tmp6, Tmp7, Tmp8, Tmp9;

float LSurface::MGSM(float x, float y, float z)
{
 // Initialization of Threshold and Number of Components
 float   Total=Components.GetThreshold();
 int N=Components.GetSize();
 // Loop through all components
 while(N--)
 {
  Ci=&Components[N];  // Get Pointer to Current Component
  // Check For Any Angular Rotation
  if( !((Ci->Theta_X==0) && (Ci->Theta_Y==0) && (Ci->Theta_Z==0)))
  {
   // There is Angular Rotation So Use Angular Model
   // Perform Translation of Component
   Tmp1=x+Ci->Tx;
   Tmp2=y+Ci->Ty;
   Tmp3=z+Ci->Tz;
   // Calculate Temporaries for Rotation
   Tmp4=Tmp2*Ci->cos_z;
   Tmp5=Tmp1*Ci->sin_z;
   Tmp6=Ci->cos_z*Tmp1;
   Tmp7=Ci->sin_z*Tmp2;
   Tmp8=Ci->cos_y*Tmp3;
   // Perform Rotation
   x1=(Ci->cos_y*(Tmp6-Tmp7)+Ci->sin_y*Tmp3);
   y1=(Ci->sin_x*(Ci->sin_y*Tmp6- Ci->sin_y*Tmp7-Tmp8) + Ci->cos_x*(Tmp5+Tmp4));
   z1=(Ci->cos_x*(-Ci->sin_y*Tmp6+Ci->sin_y*Tmp7+Tmp8) + Ci->sin_x*(Tmp5+Tmp4));
   // Perform Stretching
   x2=x1*Ci->Sx;
   y2=y1*Ci->Sy;
   z2=z1*CI->Sz;
   // Calculate Divisor
   Tmp9=(x2*x2+y2*y2+z2*z2);
   Total-=( Ci->Strength / (Tmp9< 0.000001? 0.000001 : Tmp9));
  }
  else
  {
   // There is No Angular Rotation (x1), So Use Simple Form
   // Translate and Stretch at the Same Time
   x2=(x+Ci->Tx)*Ci->Sx;
   y2=(y+Ci->Ty)*Ci->Sy;
   y2=(z+Ci->Tz)*Ci->Sz;
   // Calculate Divisor
   Tmp9=(x2*x2+y2*y2+z2*z2);
   // Apply to Threshold
   Total-=(Ci->Strength / (Tmp9< 0.000001? 0.000001 : Tmp9));
  };
 };
 return Total;
}

.............................................................................

From: foo@titan.rice.edu (Mark Hall)
Newsgroups: comp.graphics
Subject: Re: Blobbly Polygons
Summary: Blobby molecules are implicit surfaces

>Can anyone recommend some references for "Meta-Sphere" or "Blobby Molecule"
>algorithms that create a tesselated 3-d geometry? (as opposed to scanline
>algorithms for direct rendering of these primitives)

The surfaces of these blobby molecules are implicitly defined.
That is, they are defined by a single equation

f(x, y, z) = 0

I assume that you have seen Blinn's '82 paper on rendering these directly.
It was printed in ACM transactions on Graphics, and pointed to in that
year's SIGGRAPH proceedings.

In the last couple of years several people have looked into using
polygonal representations of implicit surfaces. Implicit surfaces
are becoming a little more popular because they are nice for defining
"blending surfaces". My advisor wrote his thesis on the form the implicit
blending surface needs to be in. Data that is in the form of spatially
arranged density data can also be viewed by picking a level set to be
the surface of interest. Lots of data is in this form: CT scan, NMR,
some seismic data, etc.

Back to your initial question: what are some references on
polygonalizing these things?

As mentioned before, Blinn rendered these things directly.
The brothers Wyvil have done a lot of work incorporating these objects
into their Graphicsland environment at U. Calgary. I see some
of their students posting in this group, if you have questions
for them. Lorenson and Cline
showed a table lookup algorithm that is quite nice. It does have
(at least) one bug, a consequence of which is pointed out by Duurst,
but I have used it in a number of applications with pleasing results.
Bloomenthal presents an algorithmic approach with the added feature
of being able to adaptively approximate the surface. That is, where
the surface is flat[ter], use fewer but larger polygons to approximate it.
His algorithm is tricky to implement correctly by his own admission.
Joe Warren and I found a different method for adaptively polygonalizing
the surface that we think is easier to implement.

...

From: johnston@lbl-csam.arpa (Bill Johnston [csr])
Newsgroups: comp.graphics
Subject: Re: Blobbly Molecules - tessellating
Keywords: meta-ball, blobby molecules, tessellation

This algorithm works locally, seeking to fit a surface through each
elemental cube (voxel) (as defined by the the grid intersections) that
intersects the surface. The result is a large number of small polygons
that completely cover the surface f=C.

For ``blobby molecules'' you might contour the electric field strength
using Marching Cubes to tessellate the surface |E|=C. We have made an
interesting movie of methane molecules trapped in a crystal lattice by
just tessellating the Van der Waal's radii about the collection of
atomic centers for methane.  We did nothing more complex than
tessellating a contour of the field f=x**2+y**2+z**2 about every atomic
center, and let the hidden surface processing worry about the
intersecting shperes. This, of course, does not give quite the blobbly
appearence of |E| = C taken over the whole molecule.

Be cautioned that the algorithm as presented at SIGGRAPH 87 has an
error that causes small holes to appear in the tessellation at some
saddle points on the surface. I talked to Bill Lorensen at SIGGRAPH
last year and he said that he was going to publish a correction in the
SIGGRAPH Quarterly. I don't know if he has done that yet, or not.

We have an implementation of this algorithm that we will make available
when we distribute our video movie making system software in a few months.
See:

.............................................................................

Marshall wrote:
> What is the formula for metaballs?  I've been looking
> on the WWW for a long time and I can't seem to find much on it.
> (except 3D plugins)  Any help there would be apreciated.

okay, here's some pseudo code for testing a point x,y,z:

field=0;
for n=1 to numblobs do
{
 field = field + calcfield( blob[n], x, y, z);
}

/* when field < 1, the point is outside the generated blob, when it's >1
it's inside.  When it is 1, it is on the surface.  calcfield is as
follows: */

calcfield(blob,x,y,z)
{
 return (blob.max_radius_of_influence^2 / distance(blob, ( x, y, z))^2)*blob.strength
}


